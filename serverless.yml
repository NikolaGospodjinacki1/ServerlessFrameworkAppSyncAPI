
service: ${env:PROJECT_NAME}AppSychAPI
frameworkVersion: '3'
useDotenv: true
# automatically picks up dotenv files (.env first, if not available .env.EVIRONMENT or .env.LOCAL.... read docs)

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'} # stage can be specified on deploy, dev by default
  profile: ${env:DEV_PROFILE_NAME} # profile name from ~/.aws/credentials 
  region: ${env:REGION}
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}-${env:PROJECT_NAME}

plugins:
  - serverless-appsync-plugin # simplifies appsync api defintion
  - serverless-s3-sync # copies (static?) local files to s3 bucket used for CloudFront 
  - serverless-cloudfront-invalidate # invalidates s3 content (refreshes CloudFront) on every 'sls deploy'

custom:
  appSync:
    name: ${env:PROJECT_NAME}_api
    allowHashDescription: true
    authenticationType: AMAZON_COGNITO_USER_POOLS
    schema: schema.graphql 
    userPoolConfig:
      awsRegion: ${env:REGION}
      defaultAction: ALLOW
      userPoolId: { Ref: CognitoUserPool }
    mappingTemplateLocation: mapping-templates
    mappingTemplates:
      - dataSource: dynamodb_source
        type: Query
        field: getProjectById
        request: query-getprojectbyid-request-template.txt
        response: query-getprojectbyid-response-template.txt
      - dataSource: dynamodb_source
        type: Mutation
        field: putProject
        request: mutation-createproject-request-template.txt
        response: mutation-createproject-response-template.txt
    dataSources:
      - type: AMAZON_DYNAMODB
        name: dynamodb_source
        description: source/location table 
        config:
          tableName: { Ref: Table}
          serviceRoleArn: { Fn::GetAtt: [AppSyncServiceRole, Arn]}
        #region: region for table
    xrayEnabled: true #xray tracing/logging
    tags:
      project: ${env:PROJECT_NAME}

  s3Sync:
    - bucketName: ${env:STATIC_BUCKET_NAME}-${sls:stage}
      localDir: out/ # directory that contains static files to be server by CloudFront
      acl: private

  cloudfrontInvalidate:
    - distributionIdKey: DistributionId # invalidate files for this distribution (value from stack output)
      items:
        - "/*" # invalidate all in bucket

resources:
  Resources:
  ##### CLOUDFRONT/S3 RESOURCES #####
    OriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Sub ${env:PROJECT_NAME}_${sls:stage}_s3_origin_oai

    StaticResourcesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${env:STATIC_BUCKET_NAME}-${sls:stage}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration: # private bucket (only accessible through CloudFront url (or custom domain))
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !Sub ${StaticResourcesBucket}.s3.${AWS::Region}.amazonaws.com
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https # https only
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          PriceClass: PriceClass_100 # EU and NA
          #PriceClass_All

    ##### DYNAMODB RESOURCES #####
    Table:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: projectId
            AttributeType: S
        KeySchema:
          - AttributeName: projectId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          #BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    ##### COGNITO RESOURCES #####    
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: cognito_${env:PROJECT_NAME}_backend_user_pool
      
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: cognito_sls_backend_client
        UserPoolId:
          Ref: CognitoUserPool

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: cognito_${env:PROJECT_NAME}_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]

    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]

    ##### ROLE/POLICY RESOURCES #####
    StaticResourcesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticResourcesBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: # allow CloudFront to retrive (GET) objects from private S3 bucket through OAI
                AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}
              Action: s3:GetObject
              Resource: !Sub arn:aws:s3:::${StaticResourcesBucket}/*

    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: app_${env:PROJECT_NAME}_auth_role
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "cognito_${env:PROJECT_NAME}_authorized_policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"

    AppSyncServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub "appsync_${env:PROJECT_NAME}_api_role"
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"  
        Policies: # appSync api can do these operations on DDB table defined in the stack (currently all basic operations)
          - PolicyName: "dynamodb_${env:PROJECT_NAME}_policy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

  Outputs:
    DistributionId:
      Description: CloudFront Distribution Id
      Value: !Ref Distribution
      Export:
        Name: !Sub ${AWS::StackName}-DistributionId
    DistributionDomainName:
      Description: CloudFront Distribution Domain Name
      Value: !GetAtt Distribution.DomainName
      Export:
        Name: !Sub ${AWS::StackName}-DistributionDomainName
    StaticResourcesBucketName:
      Description: Static Resources Bucket Name
      Value: !Ref StaticResourcesBucket
      Export:
        Name: !Sub ${AWS::StackName}-StaticResourcesBucketName